1. Install pipenv
	pip3 install pipenv
2. Set up Virtual Environmnet
	pipenv shell (Activate Virtual Env, Creates PipFile that stores the dependencies)
3. Install Dependencies
	pipenv install flask flask-sqlalchemy flask-marshmallow marshmallow-sqlalchemy

jsonify - take dict or array of dict and return json output


4. Create Tables
	Open python shell
	from app import app, db
	app.app_context().push()
	db.create_all()

5. Put debug = True for reload

6. For postgresql install 

	psycopg2
	psycopg2-binary

Flask-WTF for form validation
passlib for hashing passwords

pip freeze > requirements.txt


instance = Math()
dir(instance) shows all properties and methods of that class

module/python file

@app.route -> Decorator


@app.errorhandler(404)
def handle_404(e):
    # handle all other routes here
    return 'Not Found, but we HANDLED IT

multiple routes pointing to same function is possible

params
"/product/<id>"
def deleteProduct(id):

query
"/product"
req.args.get("queryParam")
If no value is passed shows "None"

handle default value
"/product"
def getProduct(name = "Product 1"):
req.args.get("name", name)

If query param is not passed then default value is used


default every parameter is considered as a string
"/product/<int:num>"

convert to string with -> str(num)

.format() converts to string

Jinga -> template engine, generate html dynamically on demand

{{ variableName }}
{% logic %}

{% for movie in movies %}
	<li> {{movie}} </li>
{% endfor %}

explicitly close the block of code using endfor as identation does not work here
In python identation takes care of closing of the loop

// Key, value
dict = {"movie1": 2}
for movie, duration in dict.items():

{% if duration < 2 %}
	Short
{% elif duration> 2 and duration < 3 %}
	Medium
{% else %}
	Long
{% endif %}


url_for
generates url on the fly based on arguments passed

href="../static/styles.css" NO
href="{{ url_for('static', filename='css/styles.css') }}"
folder, filename

Filters:

Use | within {{}} pipe to apply filter to a variable

eg {{ name | capitalize | upper }} prints name with first letter CAPS
pipe multiple filters is possible

Macros - like functions - reusable code

{% macro render_dict(dictionary) %}

{% endmacro %}


{% import 'macros.html' as myMacro %}

{{ myMacro.render_dict(movies) }}


SECRET_KEY is used by flask to secure the data inside the user sessions

app.config.update()

__init__
special python method that is invoked whenever we create an instance of a class
self is the instance that we are creating on any class

__repr__ takes self as single parameter
return string representation of a instance
helps in formatting and produce readble output of data

def __repr__(self):
	return 'The id is {}, Name is {}'.format(self.id, self.name)

db.create_all() creates all tables if they dont exist

db.session.add_all([instance1, instance2, ...])
db.session.commit()

session object is like temporary space or memory where uncommitted transactions exist, its like a staging zone

nullable = False (not null)
index = True (speed up the retrieval)
default = datetime.utcnow()
unique = True
db.DateTime

Relationship

1-many relationship
(each publisher can have many books)
pub_id = db.Column(db.Integer, db.ForeignKey('publication.id'))

 
Book.query.all()
Book.query.first()
Book.query.filter_by(name='') gives query object
Book.query.filter_by(name='').all() gives list

Book.query.get(1) - primary key
Book.query.limit(5).all()

Book.query.order_by(Book.title).all()

result = Publication.query.filter_by(name="Oracle").first()
result.name
Book.query.filter_by(pub_id = result.id).all()

 
db.session.delete(Book) for deleting one
Book.query.filter_by(pub_id=6).delete() for deleting one or many

Contexts - 2 types 

request context - created by flask when user submits a request and removed when the request is successfully server
request and session object
uses secret key to encrypt data across session

application context -
global var g 
current_app

app.app_context() 
Flask gives us the ability to run multiple applications each with diff set of configs
Hence we mention which application context to use.
It tells to use current_app which is the current application context

request decorators
@app.before_request -> executes code before each and every request
@app.before_first_request -> executes code only before the first request
@app.after_request -> executes code after request is submitted but only if exceptions occur
@app.teardown_request -> executes code after every request even if exceptions occur

eg check if user is logged in or not before every request
@app.before_request
def check_login_status:

Packaging - idea is to organize code into modules that does a specific task

Blog and Shop Feature

Blog Package
	html, python, static files

ECommerce Pakage
	html, python, static files

Package folder with __init__.py file 

Blueprints
a set of operation registered on an application and it simplifies how large applications work

Generally defined in __init__.py files of package

__name__ special python variable that defines the scope

 
Jinga Template Inheritence
Many files might have same html content like a footer, sidebar etc
Inefficient to copy it to all the pages

layout.html

Organize code into blocks, add repetitive html in block and resuse whenever needed 
{% block head %}
{% endblock %}


{{ form.hidden_tag() }}
Flask WT Form security feature, helps protect from CSRF attacks
without this key it is almost impossible to hack the Flask Application
and hence this is hidden field

request.form has the form fields
it also has csrf_token because of the hidden_tag in the form

class methods belong to a class but are not associated with any class instance
directly called, no need of instance

class User:
@classmethod
def create_user(cls, user)
cls is class, no self here

// called directly
User.create_user()

form.validate_on_submit()
checks if it is a POST request and if the data entered is valid

get_flashed_messages() stores all the flash messages that we need to show in application

quick_form() marco to render the form in single line and hence avoid writing html

UserMixin()
works with models
has is_autheticated, is_active, is_anonymous etc

current_user.is_authenticated
current_user.user_name

Python Basics

f string
f"Hello {name}"

Template string with format
"Hello {}".format(name)

User Input
name = input("Enter name")

input always gives a string
height = int(input())

Format till 2 decimals
f"{height:.2f}"

x = 4863.4343091          # example float to format

print(f"{x:.6}")          # f-string version
print("{:.6}".format(x))  # format method version

List, Tuples, Sets
list = [1,2,4]

cant modify a tuple, cant add or remove elements from tuple
tuple = (1,2,3)
set = {1,2,3} add remove is possible but no duplicates 
list and tuple guarantees order, Set does not maintain order

access list and tuple using subscript notation
list[0]
tuple[0]

list.append(5) adds at last position
list.remove("Bob")

set.add("Smith")

empty set => set()

set1 = {1,2,4}
set2={2}

set1.difference(set2)
{1, 4}
removes set2 elements from set1

set1.union(set2)
{1,2,4}

set1.intersection(set2)

tuple with single value
my_tuple = (5) is wrong, treated as expression
my_tuple = (5, ) or 15, works


Boolean True False

Tuple and list same behavior 

list1 = [1,2]
list2 = [2,1]
list1 == list2 False
list1 is list2 False

list1 = [1,2]
list2 = [1,2]
list1 == list2 True

set1 = {1,2}
set2 = {2,1}
set1 == set2 True
set1 is set2 False

if: 
elif:
else:

in keyword - check for membership, works for list, tuple, set, strings
lst = [1,2,3]
3 in lst - True

Loops
for item in items:
while condition:
for item in range(4): runs from 0,1,2,3

List Comprehensions
usually used in single line
new list is created

numbers = [1,2,3]
double = []
for number in numbers:
	double.append(numbber * 2)

Better Way
doubled = [number*2 for number in numbers]

starts_with_s = [friend for friend in friends if friend.startswith("S")]


Dictionary

d = {"name": "X", "age": 25}
keys can be string, int or any other hashable types
d["name"]

for key, value in dict.items():
for key in dict:
dict.values()

Destructuring variables
x, y = 5, 11
x, y = [5, 11]
x, y = (5, 11)
x, y = {5, 11}

head, *tail = [1,2,3,4]
1 [2,3,4]

*head, tail = [1,2,3,4]
[1,2,3] 4

def functionName():

def greet(name, surname):

Positional Arguments
greet("John", "Doe")

Keyword or Named Arguments
greet(surname="Doe", name="John")

Cannot put positional argument after named argument
i.e
add(x=5, 10)
add(10, y=20) is allowed

None - no value, missing or undeclared value
Functions return None by default

Lambda Functions:

Does not have a name and only used to return values

operate on i/p and return o/p, never used to perform actions

add = lambda x, y: x + y
print(add(5,10))

print(lambda x, y: x + y)(5,7)

doubled = lambda x: x*x
 
def double(x):
	return x*2

seq = [1,2,3]
douled = [double(x) for x in seq]
 OR
doubled = map(double, seq)
for every item in seq, call double function

List Comprehension preferred

map function returns map object hence typecast it to list(map())

Dictionary Comprehensions
users = [(0, "Bob", "password"), (1, "John", "secret")]

user_map = {user[1]: user for user in users}
output
{'Bob': (), 'John': ()}

Unpacking Fun Arguments:

def multiply(*args):
	print(args) // (1,2,3)
args is the var to collect the arguments
the function has set of arguments that would be collected in args as a tuple

multiply(1,2,3)

def add(x,y):
	return x+y

nums = [1,2]
add(*nums)
destructures nums and passes it into x and y

nums = {"x": 15, "y": 10}
add(**nums)
passes each key as a named argument

Unpacking keyword arguments:

def named(**kwargs):
	print(kwargs) // {'name': "John", "age": 12}

named(name="John", age=12)

** for dictionary pack and unpack
* for tuple pack and unpack

* positional args as tuple
** named args as dict

Object Oriented:
__init__ method takes self, is constructor
executed when instance is created

student = Student()
print(Student.average(student))
is same as
print(student.average())

student is passed as self

__ are magic or spl methods
Student() is same as Student.__init__()

gets called when we want to convert obj to string eg print or str(object)
print(student) // hello, turns obj into string
def __str__(self):
	return "hello"
 

print out unambigious representation of obj
def __repr__(self):

@classmethod and @staticmethod

All functions inside the class that use the object self as first parameter are called instance methods

test = TestClass()
test.instance_method()
OR
TestClass.instance_method(test)

@classmethod
def class_method(cls):
	cls is the class itself

TestClass.class_method() TestClass is passed as arg internally

@staticmethod
def static_method():

dont get self or cls as arg
func that does not use class or instance then use static
ClassTest.static_method()

instance -> product action that uses data in obj
class -> used as factories, to create objects

Inheritence
allows a class to take prop and methods from another class
 
Printer inherts Device
class Printer(Device):
	def __init__(self):
		super().__init__()

every class inherits the Pythons Object Class

Class Composition: Counterpart to Inheritence to build class that uses other classes

Book cannot inherit Bookshelf
Bookshelf contains many Books

book1 = Book()
book2 = Book()
shelf = Bookshelf(book1, book2)

Type Hinting

def avg(nums: list) -> float:
	return

nums is a list and fun return float
from typing import List, Set, Tuple

